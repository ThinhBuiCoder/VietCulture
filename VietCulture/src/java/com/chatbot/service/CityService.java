package com.chatbot.service;

import com.chatbot.dao.TravelDAO;
import com.chatbot.model.City;
import com.chatbot.model.Experience;
import com.chatbot.model.Accommodation;
import java.util.List;

public class CityService {
    
    private final TravelDAO travelDAO;
    
    public CityService() {
        this.travelDAO = new TravelDAO();
    }
    
    public CityService(TravelDAO travelDAO) {
        this.travelDAO = travelDAO;
    }
    
    /**
     * Handle city selection and provide city information
     */
    public String handleCitySelection(String cityName) {
        try {
            List<City> cities = travelDAO.getAllCities();
            City selectedCity = findCityByName(cities, cityName);
            
            if (selectedCity == null) {
                return "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ th√†nh ph·ªë n√†y.";
            }
            
            List<Experience> experiences = travelDAO.getExperiencesByCity(selectedCity.getVietnameseName(), 3);
            List<Accommodation> accommodations = travelDAO.getAccommodationsByCity(selectedCity.getVietnameseName(), 2);
            
            return buildCityResponse(selectedCity, experiences, accommodations);
            
        } catch (Exception e) {
            return "‚ùå C√≥ l·ªói khi t·∫£i th√¥ng tin th√†nh ph·ªë. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }
    
    /**
     * Get all available cities
     */
    public List<City> getAllCities() {
        try {
            return travelDAO.getAllCities();
        } catch (Exception e) {
            return new java.util.ArrayList<>();
        }
    }
    
    private City findCityByName(List<City> cities, String cityName) {
        String normalizedCityName = cityName.toLowerCase();
        
        for (City city : cities) {
            if (normalizedCityName.contains(city.getVietnameseName().toLowerCase()) || 
                normalizedCityName.contains(city.getName().toLowerCase())) {
                return city;
            }
        }
        
        return null;
    }
    
    private String buildCityResponse(City city, List<Experience> experiences, List<Accommodation> accommodations) {
        StringBuilder response = new StringBuilder();
        response.append("üåü ").append(city.getVietnameseName()).append(" - ƒêi·ªÉm ƒë·∫øn tuy·ªát v·ªùi!\n\n");
        
        if (!experiences.isEmpty()) {
            response.append("üéØ TR·∫¢I NGHI·ªÜM N·ªîI B·∫¨T:\n");
            for (Experience exp : experiences) {
                response.append("‚Ä¢ ").append(exp.getTitle()).append(" - ").append(exp.getFormattedPrice()).append("\n");
                response.append("  üìç ").append(exp.getLocation()).append("\n");
                response.append("  ‚≠ê ").append(exp.getAverageRating()).append("/5 (").append(exp.getTotalBookings()).append(" l∆∞·ª£t ƒë·∫∑t)\n");
                response.append("  üè∑Ô∏è ").append(exp.getType()).append(" | ").append(exp.getDifficulty()).append("\n");
                response.append("\n");
            }
        }
        
        if (!accommodations.isEmpty()) {
            response.append("üè† N∆†I L∆ØU TR√ö G·ª¢I √ù:\n");
            for (Accommodation acc : accommodations) {
                response.append("‚Ä¢ ").append(acc.getName()).append(" - ").append(acc.getFormattedPrice()).append("\n");
                response.append("  üìç ").append(acc.getAddress()).append("\n");
                response.append("  üë• ").append(acc.getFormattedOccupancy()).append(" | ").append(acc.getType()).append("\n");
                response.append("  ‚≠ê ").append(acc.getAverageRating()).append("/5 (").append(acc.getTotalBookings()).append(" l∆∞·ª£t ƒë·∫∑t)\n");
                response.append("\n");
            }
        }
        
        return response.toString();
    }
}