package utils;

import java.sql.Timestamp;
import java.util.Date;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.Calendar;

/**
 * Utility class ƒë·ªÉ x·ª≠ l√Ω logic promotion
 */
public class PromotionUtils {
    private static final Logger LOGGER = Logger.getLogger(PromotionUtils.class.getName());
    
    /**
     * Ki·ªÉm tra xem promotion c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng
     * CH√ö √ù: ƒê√£ s·ª≠a ƒë·ªÉ lu√¥n hi·ªÉn th·ªã khuy·∫øn m√£i n·∫øu c√≥, kh√¥ng ph·ª• thu·ªôc v√†o th·ªùi gian
     */
    public static boolean isPromotionActive(int promotionPercent, Timestamp promotionStart, Timestamp promotionEnd) {
        if (promotionPercent <= 0) {
            return false;
        }
        
        if (promotionStart == null || promotionEnd == null) {
            return false;
        }
        
        // So s√°nh th·ªùi gian hi·ªán t·∫°i v·ªõi th·ªùi gian khuy·∫øn m√£i
        Date now = new Date();
        
        // Ch·ªâ tr·∫£ v·ªÅ true khi th·ªùi gian hi·ªán t·∫°i n·∫±m trong kho·∫£ng th·ªùi gian khuy·∫øn m√£i
        return now.getTime() >= promotionStart.getTime() && now.getTime() <= promotionEnd.getTime();
    }
    
    /**
     * Ki·ªÉm tra xem ng√†y ƒë·∫∑t ch·ªó c√≥ n·∫±m trong kho·∫£ng khuy·∫øn m√£i kh√¥ng
     * @param promotionPercent Ph·∫ßn trƒÉm khuy·∫øn m√£i
     * @param promotionStart Ng√†y b·∫Øt ƒë·∫ßu khuy·∫øn m√£i
     * @param promotionEnd Ng√†y k·∫øt th√∫c khuy·∫øn m√£i
     * @param bookingDate Ng√†y ƒë·∫∑t ch·ªó c·∫ßn ki·ªÉm tra
     * @return true n·∫øu ng√†y ƒë·∫∑t ch·ªó n·∫±m trong kho·∫£ng khuy·∫øn m√£i
     */
    public static boolean isPromotionActiveForDate(int promotionPercent, Timestamp promotionStart, 
                                                Timestamp promotionEnd, Date bookingDate) {
        if (promotionPercent <= 0) {
            return false;
        }
        
        if (promotionStart == null || promotionEnd == null || bookingDate == null) {
            return false;
        }
        
        // Chuy·ªÉn c√°c ng√†y v·ªÅ 00:00:00 ƒë·ªÉ so s√°nh ch√≠nh x√°c ng√†y
        Calendar calBooking = Calendar.getInstance();
        calBooking.setTime(bookingDate);
        calBooking.set(Calendar.HOUR_OF_DAY, 0);
        calBooking.set(Calendar.MINUTE, 0);
        calBooking.set(Calendar.SECOND, 0);
        calBooking.set(Calendar.MILLISECOND, 0);
        
        Calendar calStart = Calendar.getInstance();
        calStart.setTime(promotionStart);
        calStart.set(Calendar.HOUR_OF_DAY, 0);
        calStart.set(Calendar.MINUTE, 0);
        calStart.set(Calendar.SECOND, 0);
        calStart.set(Calendar.MILLISECOND, 0);
        
        Calendar calEnd = Calendar.getInstance();
        calEnd.setTime(promotionEnd);
        calEnd.set(Calendar.HOUR_OF_DAY, 23);
        calEnd.set(Calendar.MINUTE, 59);
        calEnd.set(Calendar.SECOND, 59);
        calEnd.set(Calendar.MILLISECOND, 999);
        
        // So s√°nh ng√†y ƒë·∫∑t ch·ªó v·ªõi kho·∫£ng th·ªùi gian khuy·∫øn m√£i
        return calBooking.getTimeInMillis() >= calStart.getTimeInMillis() && 
               calBooking.getTimeInMillis() <= calEnd.getTimeInMillis();
    }
    
    /**
     * T√≠nh gi√° sau khi √°p d·ª•ng promotion
     */
    public static double calculatePromotionPrice(double originalPrice, int promotionPercent) {
        if (promotionPercent <= 0 || promotionPercent > 100) {
            return originalPrice;
        }
        
        return originalPrice * (1 - promotionPercent / 100.0);
    }
    
    /**
     * Validate d·ªØ li·ªáu promotion
     */
    public static String validatePromotionData(int promotionPercent, Timestamp promotionStart, Timestamp promotionEnd) {
        // Ki·ªÉm tra ph·∫ßn trƒÉm promotion
        if (promotionPercent < 0 || promotionPercent > 100) {
            return "Ph·∫ßn trƒÉm khuy·∫øn m√£i ph·∫£i t·ª´ 0 ƒë·∫øn 100";
        }
        
        // N·∫øu kh√¥ng c√≥ promotion (0%), kh√¥ng c·∫ßn ki·ªÉm tra dates
        if (promotionPercent == 0) {
            return null; // Valid
        }
        
        // Ki·ªÉm tra ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        if (promotionStart == null || promotionEnd == null) {
            return "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c khuy·∫øn m√£i";
        }
        
        if (promotionStart.after(promotionEnd)) {
            return "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ng√†y k·∫øt th√∫c";
        }
        
        // Ki·ªÉm tra ng√†y b·∫Øt ƒë·∫ßu kh√¥ng qu√° xa trong qu√° kh·ª© (7 ng√†y)
        Date now = new Date();
        long sevenDaysAgo = now.getTime() - (7 * 24 * 60 * 60 * 1000);
        if (promotionStart.getTime() < sevenDaysAgo) {
            return "Ng√†y b·∫Øt ƒë·∫ßu khuy·∫øn m√£i kh√¥ng ƒë∆∞·ª£c qu√° 7 ng√†y trong qu√° kh·ª©";
        }
        
        // Ki·ªÉm tra th·ªùi gian promotion kh√¥ng qu√° d√†i (90 ng√†y)
        long maxDuration = 90 * 24 * 60 * 60 * 1000L; // 90 ng√†y
        if (promotionEnd.getTime() - promotionStart.getTime() > maxDuration) {
            return "Th·ªùi gian khuy·∫øn m√£i kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 90 ng√†y";
        }
        
        return null; // Valid
    }
    
    /**
     * T·∫°o CSS class cho promotion badge
     */
    public static String getPromotionBadgeClass(int promotionPercent) {
        if (promotionPercent >= 50) {
            return "promotion-badge promotion-super";
        } else if (promotionPercent >= 30) {
            return "promotion-badge promotion-big";
        } else if (promotionPercent >= 10) {
            return "promotion-badge promotion-medium";
        } else {
            return "promotion-badge promotion-small";
        }
    }
    
    /**
     * Format promotion text hi·ªÉn th·ªã
     */
    public static String formatPromotionText(int promotionPercent) {
        if (promotionPercent <= 0) {
            return "";
        }
        
        if (promotionPercent >= 50) {
            return "üî• SI√äU KHUY·∫æN M√ÉI " + promotionPercent + "%";
        } else if (promotionPercent >= 30) {
            return "‚ö° KHUY·∫æN M√ÉI L·ªöN " + promotionPercent + "%";
        } else {
            return "üéâ Khuy·∫øn m√£i " + promotionPercent + "%";
        }
    }
    
    /**
     * Ki·ªÉm tra xem promotion c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng (trong 24h)
     */
    public static boolean isPromotionExpiringSoon(Timestamp promotionEnd) {
        if (promotionEnd == null) {
            return false;
        }
        
        Date now = new Date();
        long oneDayFromNow = now.getTime() + (24 * 60 * 60 * 1000);
        
        return promotionEnd.getTime() <= oneDayFromNow && promotionEnd.getTime() > now.getTime();
    }
    
    /**
     * T√≠nh s·ªë ng√†y c√≤n l·∫°i c·ªßa promotion
     */
    public static long getDaysUntilExpiry(Timestamp promotionEnd) {
        if (promotionEnd == null) {
            return 0;
        }
        
        Date now = new Date();
        long diffInMillis = promotionEnd.getTime() - now.getTime();
        
        if (diffInMillis <= 0) {
            return 0;
        }
        
        return diffInMillis / (24 * 60 * 60 * 1000);
    }
    
    /**
     * Log promotion activity
     */
    public static void logPromotionActivity(String serviceType, int serviceId, int promotionPercent, 
                                          Timestamp promotionStart, Timestamp promotionEnd, String action) {
        try {
            LOGGER.info(String.format("PROMOTION %s: %s ID %d - %d%% from %s to %s", 
                       action.toUpperCase(), serviceType, serviceId, promotionPercent, 
                       promotionStart != null ? promotionStart.toString() : "NULL",
                       promotionEnd != null ? promotionEnd.toString() : "NULL"));
        } catch (Exception e) {
            LOGGER.log(Level.WARNING, "Error logging promotion activity", e);
        }
    }
} 