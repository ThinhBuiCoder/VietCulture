package com.chatbot.service;

import com.chatbot.model.User;
import com.chatbot.model.ChatMessage;
import com.chatbot.utils.IntentClassifier;
import com.chatbot.utils.IntentClassifier.Intent;
import com.chatbot.GeminiApiClient;
import com.chatbot.constants.ChatConstants;
import java.util.List;
import com.chatbot.exception.*;
import com.chatbot.validation.MessageValidator;
import com.chatbot.utils.Logger;
public class ResponseGenerator {
    
    private final WeatherService weatherService;
    private final SearchService searchService;
    private final GuideService guideService;
    private final RecommendationService recommendationService;
    private final CityService cityService;
    private final GeminiApiClient geminiClient;
    
    public ResponseGenerator() {
        this.weatherService = new WeatherService();
        this.searchService = new SearchService();
        this.guideService = new GuideService();
        this.recommendationService = new RecommendationService();
        this.cityService = new CityService();
        this.geminiClient = new GeminiApiClient(ChatConstants.GEMINI_API_KEY);
    }
    
    public ResponseGenerator(WeatherService weatherService, SearchService searchService, 
                           GuideService guideService, RecommendationService recommendationService,
                           CityService cityService, GeminiApiClient geminiClient) {
        this.weatherService = weatherService;
        this.searchService = searchService;
        this.guideService = guideService;
        this.recommendationService = recommendationService;
        this.cityService = cityService;
        this.geminiClient = geminiClient;
    }
    
    /**
     * Generate response based on user message and session context
     */
    public String generateResponse(String userMessage, Object session, List<ChatMessage> chatHistory) {
        try {
            // L·∫•y th√¥ng tin user t·ª´ session n·∫øu c√≥
            User currentUser = null;
            Object userObj = null;
            
            // L·∫•y attribute t·ª´ session th√¥ng qua reflection ƒë·ªÉ tr√°nh ph·ª• thu·ªôc v√†o ki·ªÉu HttpSession
            try {
                // G·ªçi session.getAttribute("user") b·∫±ng reflection
                java.lang.reflect.Method getAttributeMethod = session.getClass().getMethod("getAttribute", String.class);
                userObj = getAttributeMethod.invoke(session, "user");
                
                // Ki·ªÉm tra n·∫øu userObj l√† ki·ªÉu com.chatbot.model.User
                if (userObj instanceof User) {
                    currentUser = (User) userObj;
                }
                // Tr∆∞·ªùng h·ª£p l√† model.User t·ª´ h·ªá th·ªëng ch√≠nh - gi·ªØ currentUser l√† null
            } catch (Exception e) {
                // B·ªè qua exception, gi·ªØ currentUser l√† null
            }
            
            Intent intent = IntentClassifier.classifyIntent(userMessage);
            return handleIntent(intent, userMessage, currentUser, session);
            
        } catch (Exception e) {
            e.printStackTrace();
            return ChatConstants.ERROR_PROCESSING_MESSAGE;
        }
    }
    
    private String handleIntent(Intent intent, String userMessage, User currentUser, Object session) {
        switch (intent) {
            case PASSWORD_GUIDE:
                return guideService.handlePasswordGuide(userMessage.toLowerCase(), currentUser);
                
            case AVOID_HOT_WEATHER:
                return weatherService.handleAvoidHotWeather();
                
            case MONTHLY_DESTINATION:
                return weatherService.handleWeatherInfo(userMessage);
                
            case CREATE_EXPERIENCE_GUIDE:
                return guideService.handleCreateExperienceGuide();
                
            case ITINERARY_SUGGESTION:
                return recommendationService.handleItinerarySuggestion(userMessage, currentUser);
                
            case PERSONALIZED_RECOMMENDATION:
                return recommendationService.handlePersonalizedRecommendation(userMessage, currentUser);
                
            case CULTURAL_QA:
                return recommendationService.handleCulturalQA(userMessage);
                
            case BOOKING_GUIDE:
                return handleBookingGuide(userMessage, currentUser);
                
            case EXPERIENCE_SEARCH:
                return searchService.handleExperienceSearch(userMessage);
                
            case ACCOMMODATION_SEARCH:
                return searchService.handleAccommodationSearch(userMessage);
                
            case REVIEW_GUIDE:
                return guideService.handleReviewGuide(userMessage, currentUser);
                
            case COMPLAINT_GUIDE:
                return guideService.handleComplaintGuide(userMessage, currentUser);
                
            case CHAT_GUIDE:
                return guideService.handleChatGuide(userMessage, currentUser);
                
            case FAVORITE_GUIDE:
                return guideService.handleFavoriteGuide(userMessage, currentUser);
                
            case TRANSACTION_INFO:
                return guideService.handleTransactionInfo(userMessage, currentUser);
                
            case ACCOUNT_GUIDE:
                return guideService.handleAccountGuide(userMessage, currentUser);
                
            case HOST_MANAGEMENT_GUIDE:
                return guideService.handleHostManagementGuide(userMessage, currentUser);
                
            case SYSTEM_INFO:
                return guideService.handleSystemInfo(userMessage);
                
            case WEATHER_INFO:
                return weatherService.handleWeatherInfo(userMessage);
                
            case BEST_TIME_INFO:
                return weatherService.handleBestTimeInfo(userMessage);
                
            case ACTIVITY_WEATHER_INFO:
                return weatherService.handleActivityWeatherInfo(userMessage);
                
            case CITY_SELECTION:
                String cityName = extractCityFromMessage(userMessage);
                if (cityName != null) {
                    try {
                        // G·ªçi session.setAttribute("userPreferredCity", cityName) b·∫±ng reflection
                        java.lang.reflect.Method setAttributeMethod = session.getClass().getMethod("setAttribute", String.class, Object.class);
                        setAttributeMethod.invoke(session, "userPreferredCity", cityName);
                    } catch (Exception e) {
                        // B·ªè qua n·∫øu kh√¥ng th·ªÉ set attribute
                    }
                    return cityService.handleCitySelection(cityName);
                }
                return getDefaultResponse(userMessage);
                
            case DEFAULT_RESPONSE:
            default:
                return getDefaultResponse(userMessage);
        }
    }
    
    private String handleBookingGuide(String userMessage, User currentUser) {
        String lower = userMessage.toLowerCase();
        
        if (lower.contains("ƒë·∫∑t nhi·ªÅu tr·∫£i nghi·ªám") || lower.contains("ƒë·∫∑t nhi·ªÅu ch·ªó ·ªü") ||
            lower.contains("ƒë·∫∑t nhi·ªÅu c√πng l√∫c") || lower.contains("ƒë·∫∑t nhi·ªÅu booking") ||
            lower.contains("ƒë·∫∑t nhi·ªÅu d·ªãch v·ª•")) {
            return "üîé QUY ƒê·ªäNH ƒê·∫∂T NHI·ªÄU TR·∫¢I NGHI·ªÜM/CH·ªñ ·ªû:\n\n" +
                   "‚Ä¢ B·∫°n c√≥ th·ªÉ ƒë·∫∑t nhi·ªÅu tr·∫£i nghi·ªám kh√°c nhau, mi·ªÖn l√† m·ªói tr·∫£i nghi·ªám c√≤n slot tr·ªëng v√† b·∫°n kh√¥ng c√≥ c√°c tr·∫£i nghi·ªám kh√°c tr√πng khung gi·ªù/ng√†y ƒë√≥.\n" +
                   "‚Ä¢ V·ªõi l∆∞u tr√∫, b·∫°n c√≥ th·ªÉ ƒë·∫∑t nhi·ªÅu ch·ªó ·ªü n·∫øu c√≤n ph√≤ng, nh∆∞ng h√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n th·ª±c s·ª± mu·ªën l∆∞u tr√∫ ·ªü nhi·ªÅu n∆°i c√πng th·ªùi gian.\n" +
                   "‚Ä¢ H·ªá th·ªëng s·∫Ω ki·ªÉm tra ƒëi·ªÅu ki·ªán tr√πng l·∫∑p th·ªùi gian khi b·∫°n ƒë·∫∑t.\n" +
                   "\nüí° N·∫øu c·∫ßn h·ªó tr·ª£, h√£y li√™n h·ªá host ho·∫∑c admin qua ch·ª©c nƒÉng chat!";
        }
        
        if ((lower.contains("ƒë·∫∑t") || lower.contains("tham gia") || lower.contains("mua v√©") || 
             lower.contains("book") || lower.contains("tham d·ª±") || lower.contains("ƒëƒÉng k√Ω")) &&
            (lower.contains("tr·∫£i nghi·ªám") || lower.contains("ch·ªó ·ªü") || lower.contains("l∆∞u tr√∫") || 
             lower.contains("homestay") || lower.contains("kh√°ch s·∫°n") || lower.contains("resort") || 
             lower.contains("accommodation"))) {
            return "üìù H∆Ø·ªöNG D·∫™N ƒê·∫∂T TR·∫¢I NGHI·ªÜM/CH·ªñ ·ªû:\n\n" +
                   "1Ô∏è‚É£ Ch·ªçn tr·∫£i nghi·ªám ho·∫∑c ch·ªó ·ªü b·∫°n mu·ªën ƒë·∫∑t tr√™n h·ªá th·ªëng VietCulture.\n" +
                   "2Ô∏è‚É£ Nh·∫•n n√∫t 'ƒê·∫∑t ch·ªó' ho·∫∑c 'ƒê·∫∑t tr·∫£i nghi·ªám'.\n" +
                   "3Ô∏è‚É£ ƒêi·ªÅn th√¥ng tin li√™n h·ªá, ch·ªçn ng√†y, s·ªë l∆∞·ª£ng ng∆∞·ªùi.\n" +
                   "4Ô∏è‚É£ X√°c nh·∫≠n ƒë·∫∑t ch·ªó v√† thanh to√°n (n·∫øu c√≥).\n" +
                   "5Ô∏è‚É£ Ki·ªÉm tra email ho·∫∑c m·ª•c 'Qu·∫£n l√Ω booking' ƒë·ªÉ xem tr·∫°ng th√°i ƒë·∫∑t ch·ªó.\n\n" +
                   "üí° N·∫øu c·∫ßn h·ªó tr·ª£, h√£y li√™n h·ªá host ho·∫∑c admin qua ch·ª©c nƒÉng chat!";
        }
        
        return guideService.handleBookingGuide(userMessage, currentUser);
    }
    
    private String getDefaultResponse(String userMessage) {
        try {
            String aiReply = geminiClient.generateResponse(userMessage);
            if (aiReply != null && !aiReply.trim().isEmpty()) {
                return aiReply;
            }
        } catch (Exception e) {
            // Log error if needed
        }
        
        return "ü§î T√¥i hi·ªÉu b·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ du l·ªãch Vi·ªát Nam!\n\n" +
               "H√£y cho t√¥i bi·∫øt c·ª• th·ªÉ h∆°n:\n" +
               "‚Ä¢ B·∫°n mu·ªën ƒëi ƒë√¢u? (H√† N·ªôi, ƒê√† N·∫µng, H·ªôi An, Ph√∫ Qu·ªëc...)\n" +
               "‚Ä¢ Th√≠ch lo·∫°i h√¨nh g√¨? (·∫®m th·ª±c, VƒÉn h√≥a, Phi√™u l∆∞u, L·ªãch s·ª≠)\n" +
               "‚Ä¢ Ng√¢n s√°ch nh∆∞ th·∫ø n√†o?\n" +
               "‚Ä¢ ƒêi bao nhi√™u ng√†y?\n\n" +
               "T√¥i s·∫Ω t∆∞ v·∫•n ph√π h·ª£p nh·∫•t! üòä";
    }
    
    private String extractCityFromMessage(String message) {
        // Delegate to MessageParser utility
        return com.chatbot.utils.MessageParser.extractCityFromMessage(message);
    }
}