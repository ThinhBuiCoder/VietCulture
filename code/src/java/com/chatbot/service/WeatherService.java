package com.chatbot.service;

import com.chatbot.constants.WeatherConstants;
import com.chatbot.constants.CityConstants;
import com.chatbot.utils.MessageParser;
import com.chatbot.utils.StringUtils;
import java.util.*;

public class WeatherService {
    
    /**
     * Handle weather information requests
     */
    public String handleWeatherInfo(String message) {
        String city = MessageParser.extractCityFromMessage(message);
        Integer month = MessageParser.extractMonthNumberFromMessage(message);
        String region = MessageParser.extractRegionFromMessage(message);
        
        // Priority: City + Month > City > Month > Region > fallback
        if (city != null && month != null) {
            return getCityMonthWeather(city, month);
        }
        
        // Monthly destination suggestions
        if (city == null && month != null && containsDestinationQuery(message)) {
            return getMonthlyDestinationSuggestions(month);
        }
        
        if (city != null) {
            return getCityYearWeather(city);
        }
        
        if (region != null && month != null) {
            return getRegionMonthWeather(region, month);
        }
        
        if (region != null) {
            return getRegionWeatherOverview(region);
        }
        
        if (month != null) {
            return getMonthWeatherOverview(month);
        }
        
        return getWeatherHelp();
    }
    
    /**
     * Handle best time information requests
     */
    public String handleBestTimeInfo(String message) {
        String city = MessageParser.extractCityFromMessage(message);
        String region = MessageParser.extractRegionFromMessage(message);
        
        if (city != null) {
            return getCityBestTime(city);
        }
        
        if (region != null) {
            return getRegionBestTime(region);
        }
        
        return getGeneralBestTimeInfo();
    }
    
    /**
     * Handle activity weather information
     */
    public String handleActivityWeatherInfo(String message) {
        String city = MessageParser.extractCityFromMessage(message);
        
        if (city != null) {
            return getCityActivityInfo(city);
        }
        
        return getGeneralActivityInfo();
    }
    
    /**
     * Handle avoid hot weather suggestions
     */
    public String handleAvoidHotWeather() {
        StringBuilder sb = new StringBuilder();
        sb.append("üå§Ô∏è N·∫øu b·∫°n mu·ªën tr√°nh n√≥ng, c√°c ƒëi·ªÉm ƒë·∫øn m√°t m·∫ª l√Ω t∆∞·ªüng g·ªìm:");
        sb.append("\n- ƒê√† L·∫°t: 17-25¬∞C, m√°t m·∫ª quanh nƒÉm, kh√¥ng kh√≠ trong l√†nh, nhi·ªÅu hoa v√† c·∫£nh ƒë·∫πp");
        sb.append("\n- Sa Pa: 18-28¬∞C, m√°t m·∫ª, c√≥ th·ªÉ se l·∫°nh v·ªÅ ƒë√™m, nhi·ªÅu c·∫£nh n√∫i non, ru·ªông b·∫≠c thang");
        sb.append("\nB·∫°n c≈©ng c√≥ th·ªÉ c√¢n nh·∫Øc c√°c v√πng n√∫i cao kh√°c n·∫øu mu·ªën tr·∫£i nghi·ªám kh√≠ h·∫≠u d·ªÖ ch·ªãu trong m√πa h√®!");
        return sb.toString();
    }
    
    private String getCityMonthWeather(String city, Integer month) {
        Map<Integer, String> cityWeather = WeatherConstants.CITY_MONTH_WEATHER.get(city);
        if (cityWeather != null && cityWeather.containsKey(month)) {
            return "üå§Ô∏è Th·ªùi ti·∫øt " + StringUtils.capitalize(city) + " th√°ng " + month + ":\n" + cityWeather.get(month);
        } else {
            return "‚ùå Xin l·ªói, ch∆∞a c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt cho " + StringUtils.capitalize(city) + " th√°ng " + month + ".";
        }
    }
    
    private String getMonthlyDestinationSuggestions(Integer month) {
        List<String> bestCities = CityConstants.BEST_CITIES_BY_MONTH.get(month);
        if (bestCities != null && !bestCities.isEmpty()) {
            StringBuilder sb = new StringBuilder();
            sb.append("üåü G·ª£i √Ω ƒëi·ªÉm ƒë·∫øn th√°ng ").append(month).append(": ");
            for (int i = 0; i < bestCities.size(); i++) {
                sb.append(StringUtils.capitalize(bestCities.get(i)));
                if (i < bestCities.size() - 1) sb.append(", ");
            }
            return sb.toString();
        } else {
            return "‚ùå Xin l·ªói, ch∆∞a c√≥ d·ªØ li·ªáu g·ª£i √Ω ƒëi·ªÉm ƒë·∫øn cho th√°ng " + month + ".";
        }
    }
    
    private String getCityYearWeather(String city) {
        Map<Integer, String> cityWeather = WeatherConstants.CITY_MONTH_WEATHER.get(city);
        if (cityWeather != null) {
            StringBuilder sb = new StringBuilder();
            sb.append("üå§Ô∏è B·∫£ng th·ªùi ti·∫øt 12 th√°ng t·∫°i ").append(StringUtils.capitalize(city)).append(":\n");
            for (int m = 1; m <= 12; m++) {
                sb.append("- Th√°ng ").append(m).append(": ").append(cityWeather.get(m)).append("\n");
            }
            return sb.toString();
        } else {
            return "‚ùå Xin l·ªói, ch∆∞a c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt cho " + StringUtils.capitalize(city) + ".";
        }
    }
    
    private String getRegionMonthWeather(String region, Integer month) {
        Set<String> uniqueCanonical = new HashSet<>();
        StringBuilder sb = new StringBuilder();
        sb.append("üå§Ô∏è Th·ªùi ti·∫øt th√°ng ").append(month).append(" t·∫°i c√°c th√†nh ph·ªë mi·ªÅn ").append(region).append(":\n");
        
        for (String c : WeatherConstants.CITY_MONTH_WEATHER.keySet()) {
            String cityRegion = CityConstants.CITY_REGION_MAP.getOrDefault(c, "");
            String canonical = CityConstants.CITY_CANONICAL_NAME.getOrDefault(c, StringUtils.capitalize(c));
            
            if (cityRegion.equals(region) && !uniqueCanonical.contains(canonical)) {
                Map<Integer, String> cityWeather = WeatherConstants.CITY_MONTH_WEATHER.get(c);
                sb.append("- ").append(canonical);
                if (cityWeather != null && cityWeather.containsKey(month)) {
                    sb.append(": ").append(cityWeather.get(month));
                }
                sb.append("\n");
                uniqueCanonical.add(canonical);
            }
        }
        
        if (uniqueCanonical.isEmpty()) {
            sb.append("(Ch∆∞a c√≥ d·ªØ li·ªáu th√†nh ph·ªë thu·ªôc mi·ªÅn n√†y)");
        }
        
        return sb.toString();
    }
    
    private String getRegionWeatherOverview(String region) {
        switch (region) {
            case "b·∫Øc":
                return "üå§Ô∏è Mi·ªÅn B·∫Øc: 4 m√πa r√µ r·ªát.\n- ƒê√¥ng (12-2): L·∫°nh, s∆∞∆°ng m√π, √≠t m∆∞a.\n- Xu√¢n (3-4): ·∫§m √°p, m∆∞a ph√πn nh·∫π.\n- H√® (5-8): N√≥ng ·∫©m, m∆∞a nhi·ªÅu.\n- Thu (9-11): M√°t m·∫ª, kh√¥ r√°o, th·ªùi ti·∫øt ƒë·∫πp.";
            case "trung":
                return "üå§Ô∏è Mi·ªÅn Trung: 2 m√πa r√µ r·ªát.\n- M√πa kh√¥ (1-8): N·∫Øng n√≥ng, √≠t m∆∞a.\n- M√πa m∆∞a (9-12): M∆∞a nhi·ªÅu, c√≥ th·ªÉ b√£o, l≈© l·ª•t.";
            case "nam":
                return "üå§Ô∏è Mi·ªÅn Nam: 2 m√πa r√µ r·ªát.\n- M√πa kh√¥ (11-4): N·∫Øng n√≥ng, kh√¥ r√°o.\n- M√πa m∆∞a (5-10): M∆∞a nhi·ªÅu, ·∫©m ∆∞·ªõt.";
            default:
                return "‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c v√πng mi·ªÅn.";
        }
    }
    
    private String getMonthWeatherOverview(Integer month) {
        Set<String> uniqueCanonical = new HashSet<>();
        StringBuilder sb = new StringBuilder();
        sb.append("üå§Ô∏è Th·ªùi ti·∫øt th√°ng ").append(month).append(" t·∫°i c√°c th√†nh ph·ªë n·ªïi b·∫≠t:\n");
        
        for (String c : WeatherConstants.CITY_MONTH_WEATHER.keySet()) {
            String canonical = CityConstants.CITY_CANONICAL_NAME.getOrDefault(c, StringUtils.capitalize(c));
            if (!uniqueCanonical.contains(canonical)) {
                Map<Integer, String> cityWeather = WeatherConstants.CITY_MONTH_WEATHER.get(c);
                if (cityWeather != null && cityWeather.containsKey(month)) {
                    sb.append("- ").append(canonical).append(": ").append(cityWeather.get(month)).append("\n");
                    uniqueCanonical.add(canonical);
                }
            }
        }
        
        return sb.toString();
    }
    
    private String getCityBestTime(String city) {
        switch (city) {
            case "h√† n·ªôi":
                return "üåü H√† N·ªôi:\n‚Ä¢ Th√°ng 10-4: M√πa ƒë√¥ng, l·∫°nh, √≠t m∆∞a.\n‚Ä¢ Th√°ng 5-9: M√πa h√®, n√≥ng ·∫©m, m∆∞a nhi·ªÅu.";
            case "h·∫£i ph√≤ng":
                return "üåü H·∫£i Ph√≤ng:\n‚Ä¢ Th√°ng 10-4: M√πa ƒë√¥ng, l·∫°nh, √≠t m∆∞a.\n‚Ä¢ Th√°ng 5-9: M√πa h√®, n√≥ng ·∫©m, m∆∞a nhi·ªÅu.\n‚Ä¢ Th√°ng 6-8: Bi·ªÉn ƒê·ªì S∆°n ƒë·∫πp nh·∫•t.";
            case "sapa":
            case "sa pa":
                return "üåü Sa Pa:\n‚Ä¢ Th√°ng 3-5: M√πa xu√¢n, hoa n·ªü, kh√≠ h·∫≠u d·ªÖ ch·ªãu.\n‚Ä¢ Th√°ng 9-11: M√πa l√∫a ch√≠n v√†ng, tr·ªùi trong xanh.\n‚Ä¢ Th√°ng 12-2: L·∫°nh, c√≥ th·ªÉ c√≥ bƒÉng tuy·∫øt.";
            case "h·∫° long":
            case "ha long":
                return "üåü H·∫° Long:\n‚Ä¢ Th√°ng 4-10: Th·ªùi ti·∫øt ƒë·∫πp, th√≠ch h·ª£p du thuy·ªÅn, t·∫Øm bi·ªÉn.\n‚Ä¢ Th√°ng 11-3: L·∫°nh, c√≥ s∆∞∆°ng m√π, √≠t kh√°ch.";
            case "ninh b√¨nh":
            case "ninh binh":
                return "üåü Ninh B√¨nh:\n‚Ä¢ Th√°ng 1-3: L·ªÖ h·ªôi, hoa n·ªü.\n‚Ä¢ Th√°ng 4-6: Th·ªùi ti·∫øt ƒë·∫πp, m√πa l√∫a ch√≠n.\n‚Ä¢ Th√°ng 7-9: M∆∞a nhi·ªÅu.";
            case "ƒë√† n·∫µng":
            case "da nang":
                return "üåü ƒê√† N·∫µng:\n‚Ä¢ Th√°ng 2-8: M√πa kh√¥, n·∫Øng ƒë·∫πp, bi·ªÉn xanh.\n‚Ä¢ Th√°ng 9-1: M√πa m∆∞a, c√≥ th·ªÉ c√≥ b√£o.";
            case "hu·∫ø":
            case "hue":
                return "üåü Hu·∫ø:\n‚Ä¢ Th√°ng 1-8: M√πa kh√¥, n·∫Øng ƒë·∫πp, th√≠ch h·ª£p tham quan di t√≠ch.\n‚Ä¢ Th√°ng 9-12: M∆∞a nhi·ªÅu, c√≥ th·ªÉ l≈© l·ª•t.";
            case "h·ªôi an":
            case "hoi an":
                return "üåü H·ªôi An:\n‚Ä¢ Th√°ng 2-8: Th·ªùi ti·∫øt ƒë·∫πp, √≠t m∆∞a, th√≠ch h·ª£p tham quan ph·ªë c·ªï, bi·ªÉn.\n‚Ä¢ Th√°ng 9-1: M∆∞a nhi·ªÅu, l≈© l·ª•t c√≥ th·ªÉ x·∫£y ra.";
            case "nha trang":
                return "üåü Nha Trang:\n‚Ä¢ Th√°ng 1-8: M√πa kh√¥, bi·ªÉn xanh, n·∫Øng ƒë·∫πp.\n‚Ä¢ Th√°ng 9-12: M∆∞a nhi·ªÅu, bi·ªÉn ƒë·ªông.";
            case "quy nh∆°n":
            case "quy nhon":
                return "üåü Quy Nh∆°n:\n‚Ä¢ Th√°ng 2-8: M√πa kh√¥, bi·ªÉn ƒë·∫πp, n·∫Øng nhi·ªÅu.\n‚Ä¢ Th√°ng 9-1: M∆∞a nhi·ªÅu, bi·ªÉn ƒë·ªông.";
            case "ƒë√† l·∫°t":
            case "da lat":
                return "üåü ƒê√† L·∫°t:\n‚Ä¢ Th√°ng 11-3: M√πa kh√¥, tr·ªùi se l·∫°nh, nhi·ªÅu hoa n·ªü.\n‚Ä¢ Th√°ng 4-10: M√πa m∆∞a, kh√¥ng kh√≠ m√°t m·∫ª, c·∫£nh s·∫Øc xanh t∆∞∆°i.";
            case "h·ªì ch√≠ minh":
            case "tp.hcm":
            case "th√†nh ph·ªë h·ªì ch√≠ minh":
            case "ho chi minh":
                return "üåü TP.HCM:\n‚Ä¢ Th√°ng 12-4: M√πa kh√¥, n·∫Øng nhi·ªÅu, √≠t m∆∞a.\n‚Ä¢ Th√°ng 5-11: M√πa m∆∞a, m∆∞a r√†o ng·∫Øn.";
            case "c·∫ßn th∆°":
            case "can tho":
                return "üåü C·∫ßn Th∆°:\n‚Ä¢ Th√°ng 12-4: M√πa kh√¥, n·∫Øng ƒë·∫πp, √≠t m∆∞a.\n‚Ä¢ Th√°ng 5-11: M√πa m∆∞a, s√¥ng n∆∞·ªõc h·ªØu t√¨nh.";
            case "b·∫øn tre":
            case "ben tre":
                return "üåü B·∫øn Tre:\n‚Ä¢ Th√°ng 12-4: M√πa kh√¥, th√≠ch h·ª£p du l·ªãch mi·ªát v∆∞·ªùn.\n‚Ä¢ Th√°ng 5-11: M√πa m∆∞a, s√¥ng n∆∞·ªõc xanh t∆∞∆°i.";
            case "ph√∫ qu·ªëc":
            case "phu quoc":
                return "üåü Ph√∫ Qu·ªëc:\n‚Ä¢ Th√°ng 11-4: M√πa kh√¥, bi·ªÉn l·∫∑ng, n·∫Øng ƒë·∫πp.\n‚Ä¢ Th√°ng 5-10: M√πa m∆∞a, bi·ªÉn ƒë·ªông, c√≥ m∆∞a r√†o.";
            case "v≈©ng t√†u":
            case "vung tau":
                return "üåü V≈©ng T√†u:\n‚Ä¢ Th√°ng 12-4: M√πa kh√¥, bi·ªÉn ƒë·∫πp, n·∫Øng nhi·ªÅu.\n‚Ä¢ Th√°ng 5-11: M√πa m∆∞a, bi·ªÉn ƒë·ªông nh·∫π.";
            default:
                return "üåû Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ chi ti·∫øt cho m·ªôt s·ªë th√†nh ph·ªë l·ªõn. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ H√† N·ªôi, H·∫£i Ph√≤ng, Sa Pa, H·∫° Long, Ninh B√¨nh, ƒê√† N·∫µng, Hu·∫ø, H·ªôi An, Nha Trang, Quy Nh∆°n, ƒê√† L·∫°t, TP.HCM, C·∫ßn Th∆°, B·∫øn Tre, Ph√∫ Qu·ªëc, V≈©ng T√†u...";
        }
    }
    
    private String getRegionBestTime(String region) {
        switch (region) {
            case "b·∫Øc":
                return "üåÑ Mi·ªÅn B·∫Øc (H√† N·ªôi, H·∫£i Ph√≤ng, Sa Pa, H·∫° Long, Ninh B√¨nh):\n‚Ä¢ Th√°ng 10-4: M√πa ƒë√¥ng, l·∫°nh, √≠t m∆∞a.\n‚Ä¢ Th√°ng 5-9: M√πa h√®, n√≥ng ·∫©m, m∆∞a nhi·ªÅu.";
            case "trung":
                return "üåÖ Mi·ªÅn Trung (ƒê√† N·∫µng, Hu·∫ø, H·ªôi An, Nha Trang, Quy Nh∆°n):\n‚Ä¢ Th√°ng 2-8: M√πa kh√¥, n·∫Øng nhi·ªÅu, bi·ªÉn ƒë·∫πp.\n‚Ä¢ Th√°ng 9-1: M√πa m∆∞a, c√≥ th·ªÉ c√≥ b√£o, l≈© l·ª•t.";
            case "nam":
                return "üå¥ Mi·ªÅn Nam (ƒê√† L·∫°t, TP.HCM, C·∫ßn Th∆°, B·∫øn Tre, Ph√∫ Qu·ªëc, V≈©ng T√†u):\n‚Ä¢ Th√°ng 12-4: M√πa kh√¥, n·∫Øng ƒë·∫πp, √≠t m∆∞a.\n‚Ä¢ Th√°ng 5-11: M√πa m∆∞a, m∆∞a r√†o, kh√¥ng kh√≠ m√°t.";
            default:
                return "üåû Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ chi ti·∫øt cho mi·ªÅn B·∫Øc, Trung, Nam. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ c√°c v√πng n√†y ho·∫∑c th√†nh ph·ªë c·ª• th·ªÉ.";
        }
    }
    
    private String getCityActivityInfo(String city) {
        StringBuilder sb = new StringBuilder();
        sb.append("üå§Ô∏è HO·∫†T ƒê·ªòNG N·ªîI B·∫¨T ·ªû ").append(StringUtils.capitalize(city)).append(":\n\n");
        
        switch (city) {
            case "ƒë√† n·∫µng":
            case "da nang":
                sb.append("üåä Bi·ªÉn: C√≥ nhi·ªÅu b√£i bi·ªÉn ƒë·∫πp nh∆∞ M·ªπ Kh√™, Non N∆∞·ªõc, Nam √î. Th·ªùi gian l√Ω t∆∞·ªüng: th√°ng 4-9.\n");
                sb.append("üåßÔ∏è T·∫Øm bi·ªÉn: N∆∞·ªõc trong xanh, b√£i c√°t d√†i, th√≠ch h·ª£p cho c√°c ho·∫°t ƒë·ªông th·ªÉ thao n∆∞·ªõc.\n");
                sb.append("üë£ Trekking/Leo n√∫i: B√† N√† Hills, Ng≈© H√†nh S∆°n, b√°n ƒë·∫£o S∆°n Tr√†.\n");
                sb.append("üì∏ Ch·ª•p ·∫£nh: C·∫ßu R·ªìng, C·∫ßu T√¨nh Y√™u, B√† N√† Hills, bi·ªÉn M·ªπ Kh√™.\n");
                sb.append("üéâ L·ªÖ h·ªôi: L·ªÖ h·ªôi ph√°o hoa qu·ªëc t·∫ø, l·ªÖ h·ªôi c·∫ßu ng∆∞, l·ªÖ h·ªôi Qu√°n Th·∫ø √Çm.\n");
                break;
            case "h·ªôi an":
            case "hoi an":
                sb.append("üåä Bi·ªÉn: B√£i bi·ªÉn An B√†ng, C·ª≠a ƒê·∫°i. Th·ªùi gian l√Ω t∆∞·ªüng: th√°ng 4-9.\n");
                sb.append("üåßÔ∏è T·∫Øm bi·ªÉn: Bi·ªÉn s·∫°ch, y√™n tƒ©nh, th√≠ch h·ª£p ngh·ªâ d∆∞·ª°ng.\n");
                sb.append("üë£ Trekking/Leo n√∫i: G·∫ßn c√°c l√†ng qu√™, ƒë·ªìng ru·ªông, th√≠ch h·ª£p ƒë·∫°p xe, ƒëi b·ªô.\n");
                sb.append("üì∏ Ch·ª•p ·∫£nh: Ph·ªë c·ªï, ch√πa C·∫ßu, s√¥ng Ho√†i, ƒë√®n l·ªìng.\n");
                sb.append("üéâ L·ªÖ h·ªôi: ƒê√™m ph·ªë c·ªï, l·ªÖ h·ªôi ƒë√®n l·ªìng, l·ªÖ h·ªôi C·∫ßu B√¥ng.\n");
                break;
            case "h√† n·ªôi":
                sb.append("üåä Bi·ªÉn: Kh√¥ng c√≥ bi·ªÉn, c√≥ th·ªÉ tham quan H·ªì T√¢y, H·ªì G∆∞∆°m.\n");
                sb.append("üë£ Trekking/Leo n√∫i: G·∫ßn Tam ƒê·∫£o, Ba V√¨, th√≠ch h·ª£p ƒëi cu·ªëi tu·∫ßn.\n");
                sb.append("üì∏ Ch·ª•p ·∫£nh: Ph·ªë c·ªï, H·ªì G∆∞∆°m, VƒÉn Mi·∫øu, c·∫ßu Long Bi√™n.\n");
                sb.append("üéâ L·ªÖ h·ªôi: L·ªÖ h·ªôi ƒêoan Ng·ªç, l·ªÖ h·ªôi ch√πa H∆∞∆°ng, l·ªÖ h·ªôi T·∫øt.\n");
                break;
            case "ph√∫ qu·ªëc":
            case "phu quoc":
                sb.append("üåä Bi·ªÉn: B√£i Sao, B√£i D√†i, B√£i Khem. Th·ªùi gian l√Ω t∆∞·ªüng: th√°ng 11-4.\n");
                sb.append("üåßÔ∏è T·∫Øm bi·ªÉn: Bi·ªÉn xanh, c√°t tr·∫Øng, nhi·ªÅu ho·∫°t ƒë·ªông l·∫∑n ng·∫Øm san h√¥.\n");
                sb.append("üë£ Trekking/Leo n√∫i: R·ª´ng nguy√™n sinh, su·ªëi Tranh, su·ªëi ƒê√° B√†n.\n");
                sb.append("üì∏ Ch·ª•p ·∫£nh: Sunset Sanato, l√†ng ch√†i H√†m Ninh, Dinh C·∫≠u.\n");
                sb.append("üéâ L·ªÖ h·ªôi: L·ªÖ h·ªôi Dinh C·∫≠u, l·ªÖ h·ªôi Nghinh √îng.\n");
                break;
            default:
                sb.append("(Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ chi ti·∫øt cho H√† N·ªôi, ƒê√† N·∫µng, H·ªôi An, Ph√∫ Qu·ªëc. C√°c th√†nh ph·ªë kh√°c s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau!)\n");
        }
        
        sb.append("\nüí° L∆∞u √Ω: ƒê·∫∑t ph√≤ng/booking tr∆∞·ªõc, ki·ªÉm tra th·ªùi ti·∫øt v√† l·ªãch l·ªÖ h·ªôi ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t!");
        return sb.toString();
    }
    
    private String getGeneralBestTimeInfo() {
        return "üåû TH·ªúI GIAN T·ªêT NH·∫§T ƒê·ªÇ ƒêI DU L·ªäCH VI·ªÜT NAM:\n\n" +
               "üåü H√† N·ªôi:\n‚Ä¢ Th√°ng 10-4: M√πa ƒë√¥ng, l·∫°nh, √≠t m∆∞a.\n‚Ä¢ Th√°ng 5-9: M√πa h√®, n√≥ng ·∫©m, m∆∞a nhi·ªÅu.\n\n" +
               "üåü ƒê√† N·∫µng:\n‚Ä¢ Th√°ng 2-8: M√πa kh√¥, n·∫Øng ƒë·∫πp, bi·ªÉn xanh.\n‚Ä¢ Th√°ng 9-1: M√πa m∆∞a, c√≥ th·ªÉ c√≥ b√£o.\n\n" +
               "üåü H·ªôi An:\n‚Ä¢ Th√°ng 2-8: Th·ªùi ti·∫øt ƒë·∫πp, √≠t m∆∞a, th√≠ch h·ª£p tham quan ph·ªë c·ªï, bi·ªÉn.\n‚Ä¢ Th√°ng 9-1: M∆∞a nhi·ªÅu, l≈© l·ª•t c√≥ th·ªÉ x·∫£y ra.\n\n" +
               "üåü Ph√∫ Qu·ªëc:\n‚Ä¢ Th√°ng 11-4: M√πa kh√¥, bi·ªÉn l·∫∑ng, n·∫Øng ƒë·∫πp.\n‚Ä¢ Th√°ng 5-10: M√πa m∆∞a, bi·ªÉn ƒë·ªông, c√≥ m∆∞a r√†o.";
    }
    
    private String getGeneralActivityInfo() {
        return "üå§Ô∏è HO·∫†T ƒê·ªòNG THEO TH·ªúI TI·∫æT:\n\n" +
               "üåä Bi·ªÉn:\n" +
               "‚Ä¢ H√† N·ªôi: Kh√¥ng c√≥ bi·ªÉn, n√™n ƒëi c√°c khu vui ch∆°i n∆∞·ªõc nh∆∞ H·ªì T√¢y, H·ªì G∆∞∆°m.\n" +
               "‚Ä¢ ƒê√† N·∫µng: C√≥ nhi·ªÅu b√£i bi·ªÉn nh∆∞ M·ªπ Kh√™, Non N∆∞·ªõc. T·ªët nh·∫•t ƒëi t·ª´ th√°ng 4 ƒë·∫øn th√°ng 9.\n" +
               "‚Ä¢ H·ªôi An: B√£i bi·ªÉn An B√†ng, C·ª≠a ƒê·∫°i. T·ªët nh·∫•t ƒëi t·ª´ th√°ng 4 ƒë·∫øn th√°ng 9.\n" +
               "‚Ä¢ Ph√∫ Qu·ªëc: B√£i Sao, B√£i D√†i. T·ªët nh·∫•t ƒëi t·ª´ th√°ng 11 ƒë·∫øn th√°ng 4.\n\n" +
               "üë£ Trekking/Leo n√∫i:\n" +
               "‚Ä¢ H√† N·ªôi: G·∫ßn Tam ƒê·∫£o, Ba V√¨.\n" +
               "‚Ä¢ ƒê√† N·∫µng: B√† N√† Hills, Ng≈© H√†nh S∆°n, b√°n ƒë·∫£o S∆°n Tr√†.\n" +
               "‚Ä¢ H·ªôi An: L√†ng qu√™, ƒë·ªìng ru·ªông.\n" +
               "‚Ä¢ Ph√∫ Qu·ªëc: R·ª´ng nguy√™n sinh, su·ªëi Tranh.\n\n" +
               "üì∏ Ch·ª•p ·∫£nh:\n" +
               "‚Ä¢ H√† N·ªôi: Ph·ªë c·ªï, H·ªì G∆∞∆°m, VƒÉn Mi·∫øu.\n" +
               "‚Ä¢ ƒê√† N·∫µng: C·∫ßu R·ªìng, B√† N√† Hills, bi·ªÉn M·ªπ Kh√™.\n" +
               "‚Ä¢ H·ªôi An: Ph·ªë c·ªï, ch√πa C·∫ßu, s√¥ng Ho√†i.\n" +
               "‚Ä¢ Ph√∫ Qu·ªëc: Sunset Sanato, l√†ng ch√†i H√†m Ninh.\n\n" +
               "üéâ L·ªÖ h·ªôi:\n" +
               "‚Ä¢ H√† N·ªôi: L·ªÖ h·ªôi ƒêoan Ng·ªç, ch√πa H∆∞∆°ng.\n" +
               "‚Ä¢ ƒê√† N·∫µng: L·ªÖ h·ªôi ph√°o hoa qu·ªëc t·∫ø.\n" +
               "‚Ä¢ H·ªôi An: ƒê√™m ph·ªë c·ªï, l·ªÖ h·ªôi ƒë√®n l·ªìng.\n" +
               "‚Ä¢ Ph√∫ Qu·ªëc: L·ªÖ h·ªôi Dinh C·∫≠u.\n\n" +
               "üí° L∆∞u √Ω: ƒê·∫∑t ph√≤ng/booking tr∆∞·ªõc, ki·ªÉm tra th·ªùi ti·∫øt v√† l·ªãch l·ªÖ h·ªôi ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t!";
    }
    
    private String getWeatherHelp() {
        return "‚ùì B·∫°n mu·ªën h·ªèi th·ªùi ti·∫øt ·ªü th√†nh ph·ªë n√†o/th√°ng n√†o? V√≠ d·ª•: 'th·ªùi ti·∫øt ƒê√† N·∫µng th√°ng 7', 'H√† N·ªôi th√°ng 3', 'th√°ng 8 ·ªü Hu·∫ø', 'th·ªùi ti·∫øt mi·ªÅn Nam th√°ng 12'...";
    }
    
    private boolean containsDestinationQuery(String message) {
        return message.toLowerCase().contains("n√™n ƒëi ƒë√¢u") ||
               message.toLowerCase().contains("du l·ªãch ·ªü ƒë√¢u") ||
               message.toLowerCase().contains("g·ª£i √Ω ƒëi·ªÉm ƒë·∫øn") ||
               message.toLowerCase().contains("ƒëi ƒë√¢u");
    }
}