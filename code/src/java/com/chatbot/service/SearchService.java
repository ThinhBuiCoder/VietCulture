package com.chatbot.service;

import com.chatbot.dao.TravelDAO;
import com.chatbot.model.Experience;
import com.chatbot.model.Accommodation;
import com.chatbot.utils.MessageParser;
import com.chatbot.utils.StringUtils;
import com.chatbot.constants.CityConstants;
import com.chatbot.constants.ChatConstants;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class SearchService {
    
    private final TravelDAO travelDAO;
    
    public SearchService() {
        this.travelDAO = new TravelDAO();
    }
    
    public SearchService(TravelDAO travelDAO) {
        this.travelDAO = travelDAO;
    }
    
    /**
     * Handle experience search requests
     */
    public String handleExperienceSearch(String message) {
        try {
            String city = MessageParser.extractCityFromMessage(message);
            String type = MessageParser.extractTypeFromMessage(message);
            String region = null;
            if (city == null) region = MessageParser.extractRegionFromMessage(message);
            
            StringBuilder response = new StringBuilder();
            response.append("üîç K·∫æT QU·∫¢ T√åM KI·∫æM TR·∫¢I NGHI·ªÜM:\n\n");
            
            List<Experience> experiences = new ArrayList<>();
            
            // Chu·∫©n h√≥a type cho truy v·∫•n
            String normalizedType = mapExperienceType(type);
            String normalizedRegion = mapRegion(region);
            
            // N·∫øu h·ªèi v·ªÅ region + type
            if (normalizedType != null && city == null && normalizedRegion != null) {
                // 1. G·ªçi AI sinh ƒëo·∫°n vƒÉn gi·ªõi thi·ªáu
                String aiIntro = "";
                try {
                    aiIntro = new com.chatbot.GeminiApiClient(com.chatbot.constants.ChatConstants.GEMINI_API_KEY)
                        .generateResponse("Gi·ªõi thi·ªáu v·ªÅ " + type + " " + region + " Vi·ªát Nam");
                } catch (Exception e) {
                    aiIntro = "";
                }
                response = new StringBuilder();
                response.append(aiIntro).append("\n\n");
                // 2. L·∫•y 3 tr·∫£i nghi·ªám th·ª±c t·∫ø (d√πng normalizedType)
                List<Experience> regionTypeExps = getRandomExperiencesByRegionAndType(normalizedRegion, normalizedType, 3);
                if (!regionTypeExps.isEmpty()) {
                    response.append("üåü G·ª£i √Ω tr·∫£i nghi·ªám th·ª±c t·∫ø:\n");
                    appendExperienceList(response, regionTypeExps);
                } else {
                    response.append(getRegionTypeDescription(region, type));
                }
                return response.toString();
            }
            
            // Search by city and type
            if (city != null && normalizedType != null) {
                experiences = travelDAO.getExperiencesByCityAndType(city, normalizedType, 5);
                if (experiences.isEmpty()) {
                    return handleNoExperienceResults(city, type, region);
               }
           } else if (city != null) {
               experiences = travelDAO.getExperiencesByCity(city, 5);
           } else if (normalizedType != null) {
               experiences = travelDAO.getExperiencesByType(normalizedType, 5);
           } else {
               experiences = travelDAO.getAllExperiences(5);
           }
           
           if (experiences.isEmpty()) {
               return String.format(ChatConstants.NO_RESULTS_FOUND, "tr·∫£i nghi·ªám");
           }
           
           appendExperienceList(response, experiences);
           return response.toString();
           
       } catch (Exception e) {
           e.printStackTrace();
           return ChatConstants.ERROR_SEARCH_EXPERIENCE;
       }
   }
   
   public List<Experience> getRandomExperiencesByRegionAndType(String region, String type, int limit) {
       List<Experience> all;
       try {
           all = travelDAO.getExperiencesByRegionAndType(mapRegion(region), mapExperienceType(type), 20);
       } catch (Exception e) {
           all = new ArrayList<>();
       }
       Collections.shuffle(all);
       return all.subList(0, Math.min(limit, all.size()));
   }
   
   /**
    * Handle accommodation search requests
    */
   public String handleAccommodationSearch(String message) {
       try {
           String city = MessageParser.extractCityFromMessage(message);
           String type = MessageParser.extractAccommodationTypeFromMessage(message);
           String priceRange = MessageParser.extractPriceRangeFromMessage(message);
           
           StringBuilder response = new StringBuilder();
           response.append("üè† K·∫æT QU·∫¢ T√åM KI·∫æM CH·ªñ ·ªû:\n\n");
           
           List<Accommodation> accommodations = new ArrayList<>();
           
           // Priority: Filter by price first
           if (priceRange != null) {
               return handlePriceRangeSearch(priceRange, city, response);
           }
           
           if (city != null) {
               accommodations = travelDAO.getAccommodationsByCity(city, 5);
           } else if (type != null) {
               accommodations = travelDAO.getAccommodationsByType(type, 5);
           } else {
               accommodations = travelDAO.getAllAccommodations(5);
           }
           
           if (accommodations.isEmpty()) {
               return String.format(ChatConstants.NO_RESULTS_FOUND, "ch·ªó ·ªü");
           }
           
           appendAccommodationList(response, accommodations);
           return response.toString();
           
       } catch (Exception e) {
           return ChatConstants.ERROR_SEARCH_ACCOMMODATION;
       }
   }
   
   private String mapExperienceType(String type) {
       if (type == null) return null;
       switch (type.toLowerCase()) {
           case "·∫©m th·ª±c": return "Food";
           case "vƒÉn h√≥a": return "Culture";
           case "phi√™u l∆∞u": return "Adventure";
           case "l·ªãch s·ª≠": return "History";
           case "thi√™n nhi√™n": return "Nature";
           case "ngh·ªá thu·∫≠t": return "Art";
           default: return type;
       }
   }
   
   private String mapRegion(String region) {
       if (region == null) return null;
       switch (region.toLowerCase()) {
           case "b·∫Øc": case "mi·ªÅn b·∫Øc": return "North";
           case "trung": case "mi·ªÅn trung": return "Central";
           case "nam": case "mi·ªÅn nam": return "South";
           default: return region;
       }
   }
   
   private String handleNoExperienceResults(String city, String normalizedType, String region) {
       String regionCity = CityConstants.CITY_REGION_MAP.get(city);
       
       // Suggest same type in other cities within region
       if (regionCity != null) {
           try {
               List<Experience> regionTypeExps = travelDAO.getExperiencesByRegionAndType(mapRegion(regionCity), mapExperienceType(normalizedType), 5);
               if (!regionTypeExps.isEmpty()) {
                   StringBuilder response = new StringBuilder();
                   response.append("‚ùó Hi·ªán ch∆∞a c√≥ tr·∫£i nghi·ªám ").append(normalizedType).append(" t·∫°i ").append(StringUtils.capitalize(city)).append(".\n");
                   response.append("üëâ B·∫°n c√≥ th·ªÉ tham kh·∫£o tr·∫£i nghi·ªám ").append(normalizedType).append(" ·ªü c√°c th√†nh ph·ªë kh√°c trong khu v·ª±c ").append(regionCity).append(":\n");
                   
                   for (Experience exp : regionTypeExps) {
                       if (!exp.getCityName().equalsIgnoreCase(city)) {
                           response.append("‚Ä¢ ").append(exp.getTitle()).append(" - ").append(exp.getCityName()).append(" - ").append(exp.getFormattedPrice()).append("\n");
                       }
                   }
                   return response.toString();
               }
           } catch (Exception e) {
               return ChatConstants.ERROR_SEARCH_EXPERIENCE;
           }
       }
       
       return getTypeDescription(city, normalizedType);
   }
   
   private String getRegionTypeDescription(String region, String normalizedType) {
       if (normalizedType.equals("VƒÉn h√≥a")) {
           return "üåÑ Tr·∫£i nghi·ªám vƒÉn h√≥a ·ªü mi·ªÅn " + region + ":\n- Kh√°m ph√° di t√≠ch l·ªãch s·ª≠, l√†ng ngh·ªÅ truy·ªÅn th·ªëng, l·ªÖ h·ªôi d√¢n gian, ·∫©m th·ª±c ƒë·∫∑c tr∆∞ng v√† giao l∆∞u v·ªõi ng∆∞·ªùi d√¢n ƒë·ªãa ph∆∞∆°ng.";
       } else if (normalizedType.equals("·∫®m th·ª±c")) {
           return "üçú ·∫®m th·ª±c mi·ªÅn " + region + ":\n- Th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n v√πng mi·ªÅn, ch·ª£ truy·ªÅn th·ªëng, tr·∫£i nghi·ªám n·∫•u ƒÉn c√πng ng∆∞·ªùi b·∫£n ƒë·ªãa.";
       } else if (normalizedType.equals("Phi√™u l∆∞u")) {
           return "‚õ∞Ô∏è Tr·∫£i nghi·ªám phi√™u l∆∞u mi·ªÅn " + region + ":\n- Trekking, leo n√∫i, kh√°m ph√° hang ƒë·ªông, ch√®o thuy·ªÅn, l·∫∑n bi·ªÉn...";
       } else {
           return "üåü Tr·∫£i nghi·ªám " + normalizedType + " ·ªü mi·ªÅn " + region + ":\n- ƒêa d·∫°ng ho·∫°t ƒë·ªông, h√£y h·ªèi c·ª• th·ªÉ h∆°n ho·∫∑c th·ª≠ th√†nh ph·ªë l·ªõn trong v√πng!";
       }
   }
   
   private String getTypeDescription(String city, String normalizedType) {
       if (normalizedType.equals("VƒÉn h√≥a")) {
           return "üèõÔ∏è " + StringUtils.capitalize(city) + " n·ªïi b·∫≠t v·ªõi c√°c di t√≠ch l·ªãch s·ª≠, ki·∫øn tr√∫c ƒë·∫∑c s·∫Øc, l·ªÖ h·ªôi truy·ªÅn th·ªëng v√† vƒÉn h√≥a ƒë·ªãa ph∆∞∆°ng phong ph√∫.";
       } else if (normalizedType.equals("·∫®m th·ª±c")) {
           return "üçú ·∫®m th·ª±c " + StringUtils.capitalize(city) + ": ƒê·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng, ch·ª£ truy·ªÅn th·ªëng, m√≥n ƒÉn ƒë∆∞·ªùng ph·ªë h·∫•p d·∫´n.";
       } else if (normalizedType.equals("Phi√™u l∆∞u")) {
           return "‚õ∞Ô∏è " + StringUtils.capitalize(city) + ": Trekking, kh√°m ph√° thi√™n nhi√™n, c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi h·∫•p d·∫´n.";
       } else {
           return "üåü " + StringUtils.capitalize(city) + ": ƒêa d·∫°ng ho·∫°t ƒë·ªông, h√£y h·ªèi c·ª• th·ªÉ h∆°n ho·∫∑c th·ª≠ lo·∫°i h√¨nh kh√°c!";
       }
   }
   
   private String handlePriceRangeSearch(String priceRange, String city, StringBuilder response) {
       double min = 0, max = Double.MAX_VALUE;
       
       if (priceRange.endsWith("+")) {
           min = Double.parseDouble(priceRange.replace("+", ""));
       } else {
           String[] parts = priceRange.split("-");
           if (parts.length == 2) {
               min = Double.parseDouble(parts[0]);
               max = Double.parseDouble(parts[1]);
           }
       }
       
       List<Accommodation> accommodations;
       try {
           accommodations = travelDAO.getAccommodationsByPriceRangeAndCity(min, max, city, 5);
       } catch (Exception e) {
           response.append(ChatConstants.ERROR_SEARCH_ACCOMMODATION);
           return response.toString();
       }
       
       if (accommodations.isEmpty()) {
           response.append("‚ùå Kh√¥ng t√¨m th·∫•y ch·ªó ·ªü ph√π h·ª£p v·ªõi m·ª©c gi√° n√†y. Vui l√≤ng th·ª≠ kho·∫£ng gi√° kh√°c ho·∫∑c th√†nh ph·ªë kh√°c.\n");
           return response.toString();
       }
       
       appendAccommodationList(response, accommodations);
       return response.toString();
   }
   
   private void appendExperienceList(StringBuilder response, List<Experience> experiences) {
       for (Experience exp : experiences) {
           response.append("üéØ ").append(exp.getTitle()).append("\n");
           response.append("üí∞ ").append(exp.getFormattedPrice()).append("\n");
           response.append("üìç ").append(exp.getLocation()).append("\n");
           response.append("‚≠ê ").append(exp.getAverageRating()).append("/5 (").append(exp.getTotalBookings()).append(" l∆∞·ª£t ƒë·∫∑t)\n");
           response.append("üè∑Ô∏è ").append(exp.getType()).append(" | ").append(exp.getDifficulty()).append("\n");
           response.append("‚è±Ô∏è ").append(exp.getDuration()).append(" | üë• ").append(exp.getMaxGroupSize()).append(" ng∆∞·ªùi\n");
           response.append("üìù ").append(exp.getDescription()).append("\n\n");
       }
   }
   
   private void appendAccommodationList(StringBuilder response, List<Accommodation> accommodations) {
       for (Accommodation acc : accommodations) {
           response.append("üè® ").append(acc.getName()).append("\n");
           response.append("üí∞ ").append(acc.getFormattedPrice()).append("/ƒë√™m\n");
           response.append("üìç ").append(acc.getAddress()).append("\n");
           response.append("‚≠ê ").append(acc.getAverageRating()).append("/5 (").append(acc.getTotalBookings()).append(" l∆∞·ª£t ƒë·∫∑t)\n");
           response.append("üë• ").append(acc.getFormattedOccupancy()).append(" | ").append(acc.getType()).append("\n");
           response.append("üìù ").append(acc.getDescription()).append("\n\n");
       }
   }
}